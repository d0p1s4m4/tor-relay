#!/usr/bin/env python3
import json
import time
import argparse
import os
from datetime import datetime

AVG_FILE = "/proc/loadavg"
NET_FILE = "/proc/net/dev"

def get_avg():
    avg = []
    with open(AVG_FILE, "r") as f:
        avg = f.read().strip().split(" ")
    # (1min, 5min, 15min)
    return (avg[0], avg[1], avg[2])

def get_in_out():
    with open(NET_FILE, "r") as f:
        i = 0
        for line in f:
            i += 1
            if i <= 2:
                continue
            data = line.strip().split()
            iface = data[0][:-1]
            if iface == "lo":
                continue
            return (iface, int(data[1]), int(data[9]))


def get_kbits():
    before = get_in_out()
    time.sleep(1)
    after = get_in_out()
    # (iface, in, out)
    return (before[0], (after[1] - before[1]) / 125, -((after[2] - before[2]) / 125))        

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-n", "--network")
    parser.add_argument("-l", "--load")
    parser.add_argument("--clean")

    args = parser.parse_args()
    net_data = None
    if args.network:
        net_data = {"data": []}
        if os.path.isfile(args.network):
            with open(args.network, "r") as f:
                net_data = json.load(f)
        kbits = get_kbits()
        net_data["iface"] = kbits[0]
        net_data["data"].append({
            "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "in": kbits[1],
            "out": kbits[2]
        })
        with open(args.network, "w") as f:
            json.dump(net_data, f)
    if args.load:
        load_data = {"data": []}
        if os.path.isfile(args.load):
            with open(args.load, "r") as f:
                load_data = json.load(f)
        avg = get_avg()
        load_data["data"].append({
            "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "load_1": avg[0],
            "load_5": avg[1],
            "load_15": avg[2]
        })
        with open(args.load, "w") as f:
            json.dump(load_data, f)
